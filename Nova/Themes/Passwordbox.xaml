<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:Validation="clr-namespace:Nova.Validation"
                    xmlns:Helpers="clr-namespace:Nova.Helpers">
  
  <Style x:Key="PasswordBoxBase" TargetType="{x:Type PasswordBox}">
    <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
    <Setter Property="Margin" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource UnfocusedControlBorderBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    <Setter Property="Height" Value="{DynamicResource DefaultControlHeight}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="PasswordChar" Value="●"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Helpers:PasswordBoxMonitor.IsMonitoring" Value="True" />
  </Style>
  
  <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxBase}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Grid>
						<Border CornerRadius="{DynamicResource ControlRadius}"
								BorderBrush="{TemplateBinding BorderBrush}"
								Background="{TemplateBinding BorderBrush}"
								BorderThickness="{DynamicResource ValidationBorderThickness}"
								x:Name="ValidationBorder">
							<Border CornerRadius="{DynamicResource ControlRadius}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									Background="{TemplateBinding Background}">
								<ScrollViewer x:Name="PART_ContentHost" />
							</Border>
						</Border>
						
						<Path x:Name="ErrorTriangle"
								  Data="{DynamicResource ErrorIcon}"
								  Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type PasswordBox}}, Path=(Validation:NovaValidation.Severity)}"
								  Visibility="Collapsed"
								  ToolTip="{Binding RelativeSource={RelativeSource AncestorType={x:Type PasswordBox}}, Path=(Validation:NovaValidation.ValidationTooltip)}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource FocusedInputBorderBrush}" />
						</Trigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.IsValid)}" Value="False">
							<Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type PasswordBox}}, Path=(Validation:NovaValidation.Severity)}" />
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.ValidationTooltip)}" Value="{x:Null}">
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.ValidationTooltip).Length}" Value="0">
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
						</DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <!-- Only show black border if the validation hasn't triggered yet. -->
                <Condition Property="Validation:NovaValidation.IsValid" Value="True" />
                <Condition Property="Validation:NovaValidation.IsRequired" Value="True" />
                <Condition Property="Helpers:PasswordBoxMonitor.PasswordLength" Value="0" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{DynamicResource Required}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledBrush}"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBrush}" />
							<Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{DynamicResource DisabledBrush}" />
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>	
  
  <Style x:Key="WatermarkPasswordBoxStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxBase}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Grid>
						<Border CornerRadius="{DynamicResource ControlRadius}"
								BorderBrush="{TemplateBinding BorderBrush}"
								Background="{TemplateBinding BorderBrush}"
								BorderThickness="{DynamicResource ValidationBorderThickness}"
								x:Name="ValidationBorder">
							<Border CornerRadius="{DynamicResource ControlRadius}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									Background="{TemplateBinding Background}">
								<ScrollViewer x:Name="PART_ContentHost" />
							</Border>
						</Border>
            <TextBlock Style="{DynamicResource PasswordWatermarkStyle}" />
						
						<Path x:Name="ErrorTriangle"
								  Data="{DynamicResource ErrorIcon}"
								  Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type PasswordBox}}, Path=(Validation:NovaValidation.Severity)}"
								  Visibility="Collapsed"
								  ToolTip="{Binding RelativeSource={RelativeSource AncestorType={x:Type PasswordBox}}, Path=(Validation:NovaValidation.ValidationTooltip)}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource FocusedInputBorderBrush}" />
						</Trigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.IsValid)}" Value="False">
							<Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type PasswordBox}}, Path=(Validation:NovaValidation.Severity)}" />
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.ValidationTooltip)}" Value="{x:Null}">
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.ValidationTooltip).Length}" Value="0">
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
						</DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <!-- Only show black border if the validation hasn't triggered yet. -->
                <Condition Property="Validation:NovaValidation.IsValid" Value="True" />
                <Condition Property="Validation:NovaValidation.IsRequired" Value="True" />
                <Condition Property="Helpers:PasswordBoxMonitor.PasswordLength" Value="0" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{DynamicResource Required}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledBrush}"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBrush}" />
							<Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{DynamicResource DisabledBrush}" />
							<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>