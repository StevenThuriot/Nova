<TextBox x:Class="Nova.Controls.SearchTextBox" 
		 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		 xmlns:Validation="http://nova.thuriot.be/Validation" xmlns:Properties="clr-namespace:Nova.Properties"
         xmlns:Controls="clr-namespace:Nova.Controls" xmlns:Nova="http://nova.thuriot.be/Base"
         Style="{DynamicResource SearchTextBoxStyle}">

	<TextBox.Resources>
		
		<Style x:Key="SearchTextBoxStyle" TargetType="{x:Type TextBox}">
			<Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
			<Setter Property="Margin" Value="1" />
			<Setter Property="BorderBrush" Value="{DynamicResource UnfocusedControlBorderBrush}" />
			<Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
			<Setter Property="Height" Value="{DynamicResource DefaultControlHeight}" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
			<Setter Property="Padding" Value="1" />
			<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
			<Setter Property="HorizontalContentAlignment" Value="Left" />
			<Setter Property="FocusVisualStyle" Value="{x:Null}" />
			<Setter Property="AllowDrop" Value="True" />
			<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
			<Setter Property="Stylus.IsFlicksEnabled" Value="False" />

			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<Grid>
							<Border CornerRadius="{DynamicResource ControlRadius}"
									BorderBrush="{TemplateBinding BorderBrush}"
									Background="{TemplateBinding BorderBrush}"
									BorderThickness="{DynamicResource ValidationBorderThickness}"
									x:Name="ValidationBorder">
								<Border CornerRadius="{DynamicResource ControlRadius}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Background="{TemplateBinding Background}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="20" />
										</Grid.ColumnDefinitions>

										<ScrollViewer x:Name="PART_ContentHost" KeyUp="CheckTyping" />
										<TextBlock Style="{DynamicResource WatermarkStyle}" />

										<Button Grid.Column="1" Click="HandleSearch">
											<Button.Style>
												<Style TargetType="{x:Type Button}">
													<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Search}" />
													<Setter Property="Margin" Value="2" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type Button}">
																<ControlTemplate.Resources>
																	<Storyboard x:Key="HoverOn">
																		<DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundOver" Storyboard.TargetProperty="Opacity" To="1"/>
																		<DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundOver_Highlight" Storyboard.TargetProperty="Opacity" To="0.65"/>
																	</Storyboard>
																	<Storyboard x:Key="HoverOff">
																		<DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundOver" Storyboard.TargetProperty="Opacity" To="0"/>
																		<DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundOver_Highlight" Storyboard.TargetProperty="Opacity" To="0"/>
																	</Storyboard>
																	<Storyboard x:Key="PressedOn">
																		<DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundPressed" Storyboard.TargetProperty="Opacity" To="0.84"/>
																		<DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgoundPressed_Highlight" Storyboard.TargetProperty="Opacity" To="0.65"/>
																	</Storyboard>
																	<Storyboard x:Key="PressedOff">
																		<DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundPressed" Storyboard.TargetProperty="Opacity" To="0"/>
																		<DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgoundPressed_Highlight" Storyboard.TargetProperty="Opacity" To="0"/>
																	</Storyboard>
																	<Storyboard x:Key="FocusedOn">
																		<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
																			<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
																		</DoubleAnimationUsingKeyFrames>
																	</Storyboard>
																	<Storyboard x:Key="FocusedOff">
																		<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
																			<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
																		</DoubleAnimationUsingKeyFrames>
																	</Storyboard>
																</ControlTemplate.Resources>
																<Grid x:Name="Grid">
																	<Border x:Name="BackgroundNorm" Background="{DynamicResource grayGradient}" BorderThickness="1" BorderBrush="{DynamicResource UnfocusedControlBorderBrush}" CornerRadius="{DynamicResource ControlRadius}"/>
																	<Border x:Name="BackgroundNorm_highlight" Margin="1" BorderBrush="{DynamicResource BackgroundNorm_highlightBrush}" BorderThickness="1,0,1,1" CornerRadius="{DynamicResource ControlRadius}" Opacity="0.65"/>
																	<Border x:Name="BackgroundOver" Background="{DynamicResource BtnOverFill}" BorderBrush="{DynamicResource TextBoxPressBrush}" BorderThickness="1" CornerRadius="{DynamicResource ControlRadius}" Opacity="0"/>
																	<Border x:Name="BackgroundOver_Highlight" Margin="1" Background="{DynamicResource btnOverFillHighlight}" BorderBrush="{DynamicResource hoverStroke}" BorderThickness="1,0,1,1" CornerRadius="{DynamicResource ControlRadius}" Opacity="0"/>
																	<Border x:Name="BackgroundPressed" Background="{DynamicResource BtnPressFill}" BorderBrush="{DynamicResource btnPressBorder}" BorderThickness="1" CornerRadius="{DynamicResource ControlRadius}" Opacity="0"/>
																	<Border x:Name="BackgoundPressed_Highlight" Background="{DynamicResource btnPressFillHighlight}" Margin="1" CornerRadius="2.5" Opacity="0"/>
																	<Border x:Name="Background_overlay" Margin="1,1,1,0" BorderThickness="1" CornerRadius="3,3,0,0" Background="{DynamicResource ButtonBackground_overlay}" />
																	<Border x:Name="DisabledVisualElement" Background="{DynamicResource DisabledVisualElementButtonBackgroundBrush}" BorderBrush="{DynamicResource DisabledVisualElementButtonBorderBrush}" BorderThickness="1" CornerRadius="{DynamicResource ControlRadius}" IsHitTestVisible="false" Visibility="Collapsed"/>

																	<Image Width="12" Height="12" x:Name="SearchImage" Source="{DynamicResource SearchIcon}" />

																	<ContentPresenter
																		x:Name="contentPresenter"
																		Content="{TemplateBinding Content}"
																		ContentTemplate="{TemplateBinding ContentTemplate}"
																		VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
																		HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																		Margin="{TemplateBinding Padding}"/>

																	<Border x:Name="FocusVisualElement" Margin="1" BorderBrush="{DynamicResource btnFocus}" BorderThickness="1" CornerRadius="{DynamicResource ControlRadius}" IsHitTestVisible="false" Opacity="0"/>
																	<Border x:Name="DefaultBorder" Margin="1" BorderBrush="{DynamicResource btnFocus}" BorderThickness="1" CornerRadius="{DynamicResource ControlRadius}" IsHitTestVisible="false" Opacity="0"/>
																</Grid>

																<ControlTemplate.Triggers>
																	<Trigger Property="IsDefault" Value="True">
																		<Setter Property="Opacity" TargetName="DefaultBorder" Value="1"/>
																	</Trigger>
																	<Trigger Property="IsKeyboardFocused" Value="true">

																		<Trigger.ExitActions>
																			<BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
																		</Trigger.ExitActions>
																		<Trigger.EnterActions>
																			<BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
																		</Trigger.EnterActions>

																	</Trigger>
																	<Trigger Property="IsMouseOver" Value="true">
																		<Trigger.ExitActions>
																			<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
																		</Trigger.ExitActions>
																		<Trigger.EnterActions>
																			<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
																		</Trigger.EnterActions>

																	</Trigger>
																	<Trigger Property="IsPressed" Value="true">
																		<Trigger.ExitActions>
																			<BeginStoryboard Storyboard="{StaticResource PressedOff}" />
																		</Trigger.ExitActions>
																		<Trigger.EnterActions>
																			<BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
																		</Trigger.EnterActions>
																	</Trigger>
																	<Trigger Property="IsEnabled" Value="false">
																		<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
																		<Setter Property="Visibility" TargetName="DisabledVisualElement" Value="Visible"/>
																	</Trigger>
																	<DataTrigger Binding="{Binding Path=IsSearching, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
																		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Clear}" />
																		<Setter TargetName="SearchImage" Property="Source" Value="{DynamicResource ClearIcon}" />
																	</DataTrigger>
																</ControlTemplate.Triggers>
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</Button.Style>
										</Button>
									</Grid>
								</Border>
							</Border>

							<Path x:Name="ErrorTriangle"
								  Data="{DynamicResource ErrorIcon}"
								  Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type TextBox}}, Path=(Validation:NovaValidation.Severity)}"
								  Visibility="Collapsed"
								  ToolTip="{Binding RelativeSource={RelativeSource AncestorType={x:Type TextBox}}, Path=(Validation:NovaValidation.ValidationTooltip)}" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="true">
								<Setter Property="BorderBrush" Value="{DynamicResource FocusedInputBorderBrush}" />
							</Trigger>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.IsValid)}" Value="False">
								<Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:SearchTextBox}}, Path=(Validation:NovaValidation.Severity)}" />
								<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Visible" />
							</DataTrigger>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.ValidationTooltip)}" Value="{x:Null}">
								<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
							</DataTrigger>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.ValidationTooltip).Length}" Value="0">
								<Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
							</DataTrigger>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <!-- Only show black border if the validation hasn't triggered yet. -->
                  <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.IsValid)}" Value="True" />
                  <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Validation:NovaValidation.IsRequired)}" Value="True" />
                  <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text.Length}" Value="0" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                  <Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{DynamicResource Required}" />
                </MultiDataTrigger.Setters>
              </MultiDataTrigger>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBrush}" />
                <Setter TargetName="ValidationBorder" Property="BorderBrush" Value="{DynamicResource DisabledBrush}" />
                <Setter TargetName="ErrorTriangle" Property="Visibility" Value="Collapsed" />
              </Trigger>
              <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Nova:ViewMode.IsReadOnly)}" Value="True">
                <!-- Hide Search when it is read only. -->
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</TextBox.Resources>

</TextBox>